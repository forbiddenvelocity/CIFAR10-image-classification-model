# -*- coding: utf-8 -*-
"""Image Classification Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SOKsShgnEJ5kBT4mbxEWKBgFchTDWy7U
"""

import tensorflow as tf
from tensorflow import keras
from keras import datasets, models, layers
import matplotlib.pyplot as plt
import numpy as np

(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
x_train.shape

x_test.shape

y_train = y_train.reshape(-1,)
y_train[:5]

classes = ["airplane", "automobile", "bird", "cat", "deer", "dog","frog","horse","ship","truck"]

def imgplotter(x,y,index):
  plt.figure(figsize=(10,2))
  plt.imshow(x[index])
  plt.xlabel(classes[y[index]])

imgplotter(x_train, y_train, 12)

for i in range(10,20,2):
  imgplotter(x_train, y_train,i)

x_train = x_train/255
x_test = x_test/255

"""**Artificial Neural Network**

**Convolutional Neural Network**
"""

cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

cnn.summary()

cnn.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

cnn.fit(x_train, y_train, epochs=10)

"""**Evaluating**"""

cnn.evaluate(x_test,y_test)

y_pred = cnn.predict(x_test)
y_pred[:5]

y_classes = [np.argmax(element) for element in y_pred]
y_classes[:10]

y_test[:10]

y_test = y_test.reshape(-1,)

imgplotter(x_test,y_test,6)

classes[y_classes[6]]

